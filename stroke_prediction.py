{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "65473126-3b29-429f-9ba5-1ca42ac8d62a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import streamlit as st\n",
    "from datetime import datetime\n",
    "\n",
    "# Define a function to simulate stroke prediction (replace with your model's prediction)\n",
    "def predict_stroke(input_data):\n",
    "    # For demonstration purposes, we'll assume the model predicts stroke if glucose level > 200\n",
    "    if input_data['avg_glucose_level'] > 200:\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "# App title\n",
    "st.title(\"Stroke Prediction\")\n",
    "\n",
    "# Input form\n",
    "with st.form(\"stroke_form\"):\n",
    "    name = st.text_input(\"Name\")\n",
    "    age = st.number_input(\"Age\", min_value=1, max_value=120, value=30)\n",
    "    avg_glucose_level = st.number_input(\"Average Glucose Level\", min_value=0.0, value=100.0)\n",
    "    bmi = st.number_input(\"Body Mass Index (BMI)\", min_value=0.0, value=20.0)\n",
    "    gender = st.selectbox(\"Gender\", [\"Male\", \"Female\"])\n",
    "    hypertension = st.selectbox(\"Hypertension\", [\"No\", \"Yes\"])\n",
    "    heart_disease = st.selectbox(\"Heart Disease\", [\"No\", \"Yes\"])\n",
    "    ever_married = st.selectbox(\"Married\", [\"No\", \"Yes\"])\n",
    "    work_type = st.selectbox(\"Work Type\", [\"Private Job\", \"Self-employed\", \"Govt Job\", \"Children\"])\n",
    "    smoking_status = st.selectbox(\"Smoking\", [\"Never Smoked\", \"Formerly Smoked\", \"Smokes\"])\n",
    "    residence_type = st.selectbox(\"Residence Type\", [\"Urban\", \"Rural\"])\n",
    "    submit = st.form_submit_button(\"Predict\")\n",
    "\n",
    "# Display result after form submission\n",
    "if submit:\n",
    "    input_data = {\n",
    "        \"name\": name,\n",
    "        \"age\": age,\n",
    "        \"avg_glucose_level\": avg_glucose_level,\n",
    "        \"bmi\": bmi,\n",
    "        \"gender\": gender,\n",
    "        \"hypertension\": hypertension,\n",
    "        \"heart_disease\": heart_disease,\n",
    "        \"ever_married\": ever_married,\n",
    "        \"work_type\": work_type,\n",
    "        \"smoking_status\": smoking_status,\n",
    "        \"residence_type\": residence_type\n",
    "    }\n",
    "\n",
    "    has_stroke = predict_stroke(input_data)\n",
    "\n",
    "    st.write(\"### Predicted Result of Stroke\")\n",
    "    st.write(f\"**Name**: {name}\")\n",
    "    st.write(f\"**Age**: {age}\")\n",
    "    st.write(f\"**Gender**: {gender}\")\n",
    "    st.write(f\"**Married**: {ever_married}\")\n",
    "    st.write(f\"**Work Type**: {work_type}\")\n",
    "    st.write(f\"**Smoking**: {smoking_status}\")\n",
    "    st.write(f\"**Residence Type**: {residence_type}\")\n",
    "    st.write(f\"**Heart Disease**: {heart_disease}\")\n",
    "    st.write(f\"**Glucose Level**: {avg_glucose_level}\")\n",
    "    st.write(f\"**BMI**: {bmi}\")\n",
    "    st.write(f\"**Hypertension**: {hypertension}\")\n",
    "\n",
    "    if has_stroke:\n",
    "        st.error(f\"{name}, please consult a doctor immediately! You have a stroke!\")\n",
    "    else:\n",
    "        st.success(f\"{name}, you do not have a stroke.\")\n",
    "\n",
    "    # Option to download the result\n",
    "    st.download_button(\"Download\", data=f\"{input_data}\\nPrediction: {'Stroke' if has_stroke else 'No Stroke'}\", file_name=\"stroke_prediction.txt\")\n",
    "\n",
    "    # Option to delete the result (resets the form)\n",
    "    if st.button(\"Delete\"):\n",
    "        st.write(\"Result deleted.\")\n",
    "        st.experimental_rerun()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "963ac843-3ec1-46d8-a288-9c6f4adbc354",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
